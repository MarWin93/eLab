@model string
@using eWarsztaty.Web.Models.ViewModels
@using eWarsztaty.Web.Helpers
@using GridMvc.Html
@using eWarsztaty.Web.Infrastructure
@{
    
}

<canvas id="slajdy" style="border: 1px solid black; "></canvas>

<script>

    PDFJS.workerSrc = '../Scripts/pdf.worker.js';

    var pdfDoc = null,
        pageNum = 1,
        pageRendering = false,
        pageNumPending = null,
        scale = 2.2,
        canvas = document.getElementById('slajdy'),
        ctx = canvas.getContext('2d');

    //var viewportTmp = page.getViewport(scale);
    //scale = 800 / viewport.width;

    function renderPage(num) {
        $("#presentationDiv").css("background-color", "#efeeef");
        $("#presentationPageDiv").show();
        pageRendering = true;
        // Using promise to fetch the page
        pdfDoc.getPage(num).then(function (page) {
            //var viewport = page.getViewport(scale);
            var viewport = page.getViewport(800 / page.getViewport(1.0).width);
            if (viewport.height < 600)
                canvas.height = 600;
            else
                canvas.height = viewport.height;
            canvas.width = viewport.width;
            // Render PDF page into canvas context
            var renderContext = {
                canvasContext: ctx,
                viewport: viewport
            };
            var renderTask = page.render(renderContext);

            // Wait for rendering to finish
            renderTask.promise.then(function () {
                pageRendering = false;
                if (pageNumPending !== null) {
                    // New page rendering is pending
                    renderPage(pageNumPending);
                    pageNumPending = null;
                }
            });
        });

        // Update page counters
        document.getElementById('page_num').textContent = pageNum;
    }

    /**
     * If another page rendering in progress, waits until the rendering is
     * finised. Otherwise, executes rendering immediately.
     */
    function queueRenderPage(num) {
        if (pageRendering) {
            pageNumPending = num;
        } else {
            renderPage(num);
        }
    }

    /**
     * Displays previous page.
     */
    function onPrevPage() {
        if (pageNum <= 1) {
            return;
        }
        pageNum--;
        queueRenderPage(pageNum);
    }
    //if (document.getElementById('prev') != null) {
    //    document.getElementById('prev').addEventListener('click', onPrevPage);
    //}

    /**
     * Displays next page.
     */
    function onNextPage() {
        if (pageNum >= pdfDoc.numPages) {
            return;
        }
        pageNum++;
        queueRenderPage(pageNum);
    }

    //if (document.getElementById('next') != null) {
    //    document.getElementById('next').addEventListener('click', onNextPage);
    //}

    /**
     * Asynchronously downloads PDF.
     */
    var BASE64_MARKER = ';base64,';
    var pdfAsDataUri = "data:application/pdf;base64," + '@Model'; // shortened
    var pdfAsArray = convertDataURIToBinary(pdfAsDataUri);

    PDFJS.getDocument(pdfAsArray).then(function (pdfDoc_) {
        pdfDoc = pdfDoc_;
        document.getElementById('page_count').textContent = pdfDoc.numPages;

        // Initial/first page rendering
        renderPage(pageNum);
    });



    function convertDataURIToBinary(dataURI) {
        var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
        var base64 = dataURI.substring(base64Index);
        var raw = window.atob(base64);
        var rawLength = raw.length;
        var array = new Uint8Array(new ArrayBuffer(rawLength));

        for (var i = 0; i < rawLength; i++) {
            array[i] = raw.charCodeAt(i);
        }
        return array;
    }


</script>